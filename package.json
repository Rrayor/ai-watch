{
  "name": "ai-watch",
  "displayName": "AI Watch",
  "description": "Time and date tools for AI-assisted development workflows in VS Code. Features comprehensive timezone support, business day calculations, and custom formatting.",
  "version": "1.0.0",
  "publisher": "rrayor",
  "author": {
    "name": "Benjamin Simon"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/Rrayor/copilot-watch.git"
  },
  "bugs": {
    "url": "https://github.com/Rrayor/copilot-watch/issues"
  },
  "homepage": "https://github.com/Rrayor/copilot-watch#readme",
  "keywords": [
    "ai",
    "time",
    "date",
    "timezone",
    "copilot",
    "assistant",
    "development",
    "tools",
    "productivity",
    "automation",
    "business-days",
    "formatting"
  ],
  "engines": {
    "vscode": "^1.103.0"
  },
  "categories": [
    "Other",
    "AI",
    "Data Science"
  ],
  "galleryBanner": {
    "color": "#1e1e1e",
    "theme": "dark",
    "colorIcon": true
  },
  "main": "./out/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "ai-watch.getCurrentDate",
        "title": "Get Current Date and Time"
      },
      {
        "command": "ai-watch.calculateDifference",
        "title": "Calculate Time Difference"
      },
      {
        "command": "ai-watch.convertTimezone",
        "title": "Convert Timezone"
      },
      {
        "command": "ai-watch.addTime",
        "title": "Add Time Duration"
      },
      {
        "command": "ai-watch.subtractTime",
        "title": "Subtract Time Duration"
      },
      {
        "command": "ai-watch.formatDuration",
        "title": "Format Duration"
      },
      {
        "command": "ai-watch.businessDay",
        "title": "Business Day Operations"
      },
      {
        "command": "ai-watch.dateQuery",
        "title": "Date Query Operations"
      }
    ],
    "languageModelTools": [
      {
        "name": "ai-watch_getCurrentDate",
        "tags": [
          "date",
          "time",
          "iso",
          "utc",
          "timezone",
          "format"
        ],
        "toolReferenceName": "getCurrentDate",
        "displayName": "Get Current Date",
        "modelDescription": "Returns the current date and time. Supports timezone and custom formatting parameters.",
        "canBeReferencedInPrompt": true,
        "icon": "$(clock)",
        "inputSchema": {
          "type": "object",
          "properties": {
            "timezone": {
              "type": "string",
              "description": "IANA timezone (e.g., 'America/New_York', 'Europe/Berlin'). If not specified, returns ISO and UTC formats.",
              "default": ""
            },
            "format": {
              "type": "string",
              "description": "Date format pattern. Defaults to 'YYYY-MM-DD HH:mm:ss' when timezone is specified.",
              "default": "YYYY-MM-DD HH:mm:ss"
            }
          }
        }
      },
      {
        "name": "ai-watch_calculateDifference",
        "tags": [
          "date",
          "time",
          "difference",
          "duration",
          "calculate"
        ],
        "toolReferenceName": "calculateDifference",
        "displayName": "Calculate Time Difference",
        "modelDescription": "Calculates the difference between two dates/times in days, hours, minutes, and seconds.",
        "canBeReferencedInPrompt": true,
        "icon": "$(diff)",
        "inputSchema": {
          "type": "object",
          "properties": {
            "from": {
              "type": "string",
              "description": "Starting date/time in ISO format (e.g., '2025-08-01T00:00:00Z')",
              "default": "2025-08-01T00:00:00Z"
            },
            "to": {
              "type": "string",
              "description": "Ending date/time in ISO format (e.g., '2025-08-09T13:37:01Z')",
              "default": "2025-08-09T13:37:01Z"
            }
          },
          "required": [
            "from",
            "to"
          ]
        }
      },
      {
        "name": "ai-watch_convertTimezone",
        "tags": [
          "date",
          "time",
          "timezone",
          "convert",
          "iana"
        ],
        "toolReferenceName": "convertTimezone",
        "displayName": "Convert Timezone",
        "modelDescription": "Converts a date/time from one timezone to another using IANA timezone names.",
        "canBeReferencedInPrompt": true,
        "icon": "$(globe)",
        "inputSchema": {
          "type": "object",
          "properties": {
            "date": {
              "type": "string",
              "description": "Date/time in ISO format (e.g., '2025-08-09T13:37:01Z')",
              "default": "2025-08-09T13:37:01Z"
            },
            "fromTimezone": {
              "type": "string",
              "description": "Source IANA timezone (optional, defaults to UTC)",
              "default": "UTC"
            },
            "toTimezone": {
              "type": "string",
              "description": "Target IANA timezone (e.g., 'Asia/Tokyo', 'America/New_York')",
              "default": "America/New_York"
            }
          },
          "required": [
            "date",
            "toTimezone"
          ]
        }
      },
      {
        "name": "ai-watch_addTime",
        "tags": [
          "date",
          "time",
          "add",
          "duration",
          "relative",
          "future",
          "calculate"
        ],
        "toolReferenceName": "addTime",
        "displayName": "Add Time Duration",
        "modelDescription": "Adds a specified duration (years, months, days, hours, minutes, seconds) to a base time (current time if not specified). Perfect for queries like 'what time will it be in 4 hours and 2 minutes?'",
        "canBeReferencedInPrompt": true,
        "icon": "$(add)",
        "inputSchema": {
          "type": "object",
          "properties": {
            "baseTime": {
              "type": "string",
              "description": "Base time in ISO format (optional, defaults to current time)",
              "default": ""
            },
            "years": {
              "type": "number",
              "description": "Years to add (can be negative for subtraction)",
              "default": 0
            },
            "months": {
              "type": "number",
              "description": "Months to add (can be negative for subtraction)",
              "default": 0
            },
            "weeks": {
              "type": "number",
              "description": "Weeks to add (can be negative for subtraction)",
              "default": 0
            },
            "days": {
              "type": "number",
              "description": "Days to add (can be negative for subtraction)",
              "default": 0
            },
            "hours": {
              "type": "number",
              "description": "Hours to add (can be negative for subtraction)",
              "default": 0
            },
            "minutes": {
              "type": "number",
              "description": "Minutes to add (can be negative for subtraction)",
              "default": 0
            },
            "seconds": {
              "type": "number",
              "description": "Seconds to add (can be negative for subtraction)",
              "default": 0
            },
            "timezone": {
              "type": "string",
              "description": "Optional timezone to display result in (e.g., 'America/New_York')",
              "default": ""
            }
          }
        }
      },
      {
        "name": "ai-watch_subtractTime",
        "tags": [
          "date",
          "time",
          "subtract",
          "duration",
          "relative",
          "past",
          "calculate"
        ],
        "toolReferenceName": "subtractTime",
        "displayName": "Subtract Time Duration",
        "modelDescription": "Subtracts a specified duration (years, months, weeks, days, hours, minutes, seconds) from a base time (current time if not specified). Perfect for queries like 'what was the time 4 weeks 2 hours and 64 minutes before?'",
        "canBeReferencedInPrompt": true,
        "icon": "$(remove)",
        "inputSchema": {
          "type": "object",
          "properties": {
            "baseTime": {
              "type": "string",
              "description": "Base time in ISO format (optional, defaults to current time)",
              "default": ""
            },
            "years": {
              "type": "number",
              "description": "Years to subtract",
              "default": 0
            },
            "months": {
              "type": "number",
              "description": "Months to subtract",
              "default": 0
            },
            "weeks": {
              "type": "number",
              "description": "Weeks to subtract",
              "default": 0
            },
            "days": {
              "type": "number",
              "description": "Days to subtract",
              "default": 0
            },
            "hours": {
              "type": "number",
              "description": "Hours to subtract",
              "default": 0
            },
            "minutes": {
              "type": "number",
              "description": "Minutes to subtract",
              "default": 0
            },
            "seconds": {
              "type": "number",
              "description": "Seconds to subtract",
              "default": 0
            },
            "timezone": {
              "type": "string",
              "description": "Optional timezone to display result in (e.g., 'America/New_York')",
              "default": ""
            }
          }
        }
      },
      {
        "name": "ai-watch_formatDuration",
        "tags": [
          "date",
          "time",
          "duration",
          "format",
          "human-readable",
          "elapsed"
        ],
        "toolReferenceName": "formatDuration",
        "displayName": "Format Duration",
        "modelDescription": "Formats a time duration between two dates into human-readable text (e.g., '2 days, 3 hours, 45 minutes'). Supports various verbosity levels and unit preferences.",
        "canBeReferencedInPrompt": true,
        "icon": "$(symbol-string)",
        "inputSchema": {
          "type": "object",
          "properties": {
            "from": {
              "type": "string",
              "description": "Starting date/time in ISO format",
              "default": "2025-08-01T00:00:00Z"
            },
            "to": {
              "type": "string",
              "description": "Ending date/time in ISO format",
              "default": "2025-08-09T13:37:01Z"
            },
            "verbosity": {
              "type": "string",
              "description": "Level of detail: 'compact' (shortest), 'standard' (default), 'verbose' (most detailed)",
              "enum": [
                "compact",
                "standard",
                "verbose"
              ],
              "default": "standard"
            },
            "maxUnits": {
              "type": "number",
              "description": "Maximum number of time units to show (e.g., 2 for '2 days, 3 hours')",
              "default": 3
            }
          },
          "required": [
            "from",
            "to"
          ]
        }
      },
      {
        "name": "ai-watch_businessDay",
        "tags": [
          "date",
          "business",
          "workday",
          "weekday",
          "holiday",
          "calculate"
        ],
        "toolReferenceName": "businessDay",
        "displayName": "Business Day Operations",
        "modelDescription": "Performs business day calculations including checking if a date is a business day, adding/subtracting business days, and handling weekends. Useful for project planning and deadline calculations.",
        "canBeReferencedInPrompt": true,
        "icon": "$(briefcase)",
        "inputSchema": {
          "type": "object",
          "properties": {
            "operation": {
              "type": "string",
              "description": "Operation to perform",
              "enum": [
                "isBusinessDay",
                "addBusinessDays",
                "subtractBusinessDays"
              ],
              "default": "addBusinessDays"
            },
            "date": {
              "type": "string",
              "description": "Base date in ISO format",
              "default": "2025-08-09T13:37:01Z"
            },
            "days": {
              "type": "number",
              "description": "Number of business days to add/subtract (for add/subtract operations)",
              "default": 5
            }
          },
          "required": [
            "operation",
            "date"
          ]
        }
      },
      {
        "name": "ai-watch_dateQuery",
        "tags": [
          "date",
          "query",
          "weekday",
          "period",
          "start",
          "end",
          "navigation"
        ],
        "toolReferenceName": "dateQuery",
        "displayName": "Date Query Operations",
        "modelDescription": "Performs advanced date queries like finding next/previous weekdays, getting start/end of periods (week, month, year), and date navigation. Supports chained operations for complex date calculations.",
        "canBeReferencedInPrompt": true,
        "icon": "$(search)",
        "inputSchema": {
          "type": "object",
          "properties": {
            "baseDate": {
              "type": "string",
              "description": "Base date for calculations in ISO format",
              "default": "2025-08-09T13:37:01Z"
            },
            "queries": {
              "type": "array",
              "description": "Array of query operations to perform in sequence",
              "items": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "nextWeekday",
                      "previousWeekday",
                      "startOfPeriod",
                      "endOfPeriod"
                    ]
                  },
                  "weekday": {
                    "type": "string",
                    "enum": [
                      "monday",
                      "tuesday",
                      "wednesday",
                      "thursday",
                      "friday",
                      "saturday",
                      "sunday"
                    ]
                  },
                  "period": {
                    "type": "string",
                    "enum": [
                      "week",
                      "month",
                      "quarter",
                      "year"
                    ]
                  },
                  "weekStart": {
                    "type": "string",
                    "enum": [
                      "monday",
                      "sunday"
                    ],
                    "default": "monday"
                  }
                }
              },
              "default": [
                {
                  "type": "nextWeekday",
                  "weekday": "friday"
                }
              ]
            }
          },
          "required": [
            "baseDate",
            "queries"
          ]
        }
      }
    ],
    "configuration": {
      "title": "AI Watch",
      "properties": {
        "aiWatch.defaultTimezone": {
          "type": "string",
          "default": "",
          "description": "Default timezone for operations when not specified (IANA timezone identifier, e.g., 'America/New_York'). Leave empty to auto-detect from system.",
          "scope": "window"
        },
        "aiWatch.defaultDateFormat": {
          "type": "string",
          "default": "YYYY-MM-DD HH:mm:ss",
          "description": "Default date/time format pattern for display",
          "scope": "window"
        },
        "aiWatch.businessDays": {
          "type": "string",
          "default": "Mon-Fri",
          "description": "Business days definition. Use range format like 'Mon-Fri' or 'Sun-Thu', or list format like 'Mon,Wed,Fri'",
          "scope": "window"
        },
        "aiWatch.excludedDates": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "^\\d{4}-\\d{2}-\\d{2}$"
          },
          "default": [],
          "description": "List of dates to exclude from business day calculations (holidays, shutdowns) in YYYY-MM-DD format",
          "scope": "window"
        },
        "aiWatch.weekStart": {
          "type": "string",
          "enum": [
            "monday",
            "sunday"
          ],
          "default": "monday",
          "description": "First day of the week for period calculations",
          "scope": "window"
        },
        "aiWatch.durationFormat": {
          "type": "string",
          "enum": [
            "compact",
            "standard",
            "verbose"
          ],
          "default": "standard",
          "description": "Default verbosity level for duration formatting",
          "scope": "window"
        },
        "aiWatch.maxDurationUnits": {
          "type": "number",
          "minimum": 1,
          "maximum": 7,
          "default": 3,
          "description": "Maximum number of time units to display in duration formatting",
          "scope": "window"
        }
      }
    }
  },
  "activationEvents": [
    "onStartupFinished"
  ],
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "compile:test": "tsc -p ./tsconfig.test.json",
    "watch": "tsc -watch -p ./",
    "watch:test": "tsc -watch -p ./tsconfig.test.json",
    "pretest": "npm run compile && npm run compile:test && npm run lint",
    "lint": "eslint src --ext .ts",
    "lint:fix": "eslint src --ext .ts --fix",
    "test": "vscode-test",
    "prepare": "husky install",
    "format": "prettier --write \"src/**/*.{ts,tsx,js,jsx,json,md}\"",
    "format:check": "prettier --check \"src/**/*.{ts,tsx,js,jsx,json,md}\"",
    "typecheck": "tsc --noEmit",
    "typecheck:test": "tsc --noEmit -p ./tsconfig.test.json",
    "typecheck:all": "npm run typecheck && npm run typecheck:test",
    "quality": "npm run typecheck:all && npm run lint && npm run format:check",
    "quality:fix": "npm run typecheck:all && npm run lint:fix && npm run format"
  },
  "devDependencies": {
    "@types/mocha": "^10.0.10",
    "@types/node": "22.x",
    "@types/vscode": "^1.90.0",
    "@typescript-eslint/eslint-plugin": "^8.39.0",
    "@typescript-eslint/parser": "^8.39.0",
    "@vscode/test-cli": "^0.0.11",
    "@vscode/test-electron": "^2.5.2",
    "eslint": "^9.33.0",
    "eslint-config-prettier": "^10.1.8",
    "eslint-plugin-prettier": "^5.5.4",
    "husky": "^8.0.0",
    "lint-staged": "^16.1.5",
    "prettier": "^3.6.2",
    "typescript": "^5.9.2"
  },
  "dependencies": {
    "date-fns": "^4.1.0"
  }
}
